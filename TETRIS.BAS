DEFINT A-Z
DIM SHARED BITMASK(16) AS INTEGER
TYPE BlockDataT
  w AS INTEGER
  h AS INTEGER
  r AS INTEGER
  rx AS INTEGER
  ry AS INTEGER
  map AS INTEGER
  col AS INTEGER
END TYPE
COMMON STAGEW, STAGEH, BLOCKX, BLOCKY, BLOCKCUR, BLOCKNEXT, STATUS, LEVEL, SCORE&
DIM SHARED BLOCK(19) AS BlockDataT
DIM SHARED STAGE(20, 10) AS INTEGER
DECLARE FUNCTION HITTEST(B AS BlockDataT, X0 AS INTEGER, Y0 AS INTEGER)
DECLARE SUB NEWBLOCK()
DECLARE SUB MOVE(DIR AS INTEGER)
DECLARE SUB ROTATE()
DECLARE SUB DROP()
DECLARE SUB FREEZE()
DECLARE SUB REDUCE()
DECLARE SUB DRAWBLOCK(CL AS INTEGER)
DECLARE SUB DRAWBLOCKNEXT()
DECLARE SUB DRAWSTAGE()
DECLARE SUB DRAWFRAME()
DECLARE SUB PAUSE()
DIM SHARED DELAY(7) AS SINGLE

DELAY(0)=1.2
DELAY(1)=1
DELAY(2)=0.8
DELAY(3)=0.6
DELAY(4)=0.4
DELAY(5)=0.2
DELAY(6)=0.1
FOR I = 0 TO 14
  BITMASK(I) = 2^I
NEXT I
DATA 2,2,0,0,0,&H0F,1
DATA 4,1,2,0,2,&H0F,2
DATA 1,4,0,2,1,&H0F,2
DATA 2,3,0,1,4,&H2D,3
DATA 3,2,1,1,3,&H1E,3
DATA 2,3,0,1,6,&H1E,4
DATA 3,2,1,1,5,&H33,4

DATA 2,3,0,1,8,&H1D,5
DATA 3,2,1,1,9,&H3A,5
DATA 2,3,1,1,10,&H2E,5
DATA 3,2,1,0,7,&H17,5

DATA 2,3,1,1,12,&H35,6
DATA 3,2,1,0,13,&H3C,6
DATA 2,3,0,1,14,&H2B,6
DATA 3,2,1,1,11,&H0F,6

DATA 2,3,0,1,16,&H3A,7
DATA 3,2,1,1,17,&H27,7
DATA 2,3,1,1,18,&H17,7
DATA 3,2,1,0,15,&H39,7
FOR I = 0 TO 18
  READ BLOCK(I).w, BLOCK(I).h, BLOCK(I).rx, BLOCK(I).ry, BLOCK(I).r, BLOCK(I).map, BLOCK(I).col
NEXT I
STAGEW = 10 : STAGEH = 20 : SCORE& = 0 : STATUS = 0: LEVEL = 0
FOR Y=0 TO STAGEH-1: FOR X=0 TO STAGEW-1
  STAGE(Y,X)=0
NEXT X: NEXT Y
RANDOMIZE TIMER

CALL DRAWFRAME : CALL DRAWSTAGE
BLOCKNEXT = (RND * 100) MOD 19 : CALL NEWBLOCK

DO
  TS# = TIMER
  DO
    K$=INKEY$
    SELECT CASE K$
      CASE CHR$(27) 
        STATUS = -2
        EXIT DO
      CASE CHR$(0)+CHR$(72)
        CALL ROTATE
      CASE CHR$(0)+CHR$(75)
        CALL MOVE(-1)
      CASE CHR$(0)+CHR$(77)
        CALL MOVE(1)
      CASE CHR$(0)+CHR$(80)
        CALL DROP
      CASE "p"
        CALL PAUSE
    END SELECT

    TS2# = TIMER
  LOOP UNTIL STATUS<0 OR TS2#-TS# > DELAY(LEVEL)

  IF STATUS >= 0 THEN
    IF HITTEST(BLOCK(BLOCKCUR), BLOCKX, BLOCKY + 1) <> 0 THEN
      CALL FREEZE: CALL NEWBLOCK
    ELSE
      CALL DRAWBLOCK(1)
      BLOCKY = BLOCKY + 1
      CALL DRAWBLOCK(0)
    END IF
    WHILE INKEY$<>"": WEND
  END IF
LOOP WHILE STATUS >= 0

IF STATUS = -1 THEN
  LOCATE 24,16: COLOR 12: PRINT "GAME  OVER";
  SOUND 100,2
  WHILE INPUT$(1)<>CHR$(27):WEND
END IF
SCREEN 0: COLOR 7,0: WIDTH 80: CLS: END

FUNCTION HITTEST(B AS BlockDataT, X0 AS INTEGER, Y0 AS INTEGER)
  SHARED STAGEW, STAGEH
  RES = 0 : W = B.w : H = B.h
  FOR Y = 0 TO H-1: FOR X = 0 TO W-1
    IF (B.map AND BITMASK(X+Y*W)) <> 0 THEN
      SX = X0 + X : SY = Y0 + Y
      IF SX < 0 OR SX >= STAGEW OR SY >= STAGEH THEN
        RES = 1 : GOTO ENDFUNC
      ELSEIF SY >= 0 THEN
        IF STAGE(SY,SX) <> 0 THEN
          RES = 1 : GOTO ENDFUNC
	    END IF
      END IF
    END IF
  NEXT X: NEXT Y
ENDFUNC:
  HITTEST = RES
END FUNCTION

SUB MOVE(DIR AS INTEGER)
  SHARED BLOCKX, BLOCKY, BLOCKCUR
  IF HITTEST(BLOCK(BLOCKCUR), BLOCKX + DIR, BLOCKY) <> 0 THEN
    EXIT SUB
  END IF
  CALL DRAWBLOCK(1)
  BLOCKX = BLOCKX + DIR
  CALL DRAWBLOCK(0)
END SUB

SUB ROTATE
  SHARED BLOCKX, BLOCKY, BLOCKCUR
  DIM B0 AS BlockDataT, B AS BlockDataT
  B0 = BLOCK(BLOCKCUR) : B = BLOCK(B0.r)
  X = BLOCKX + B0.rx - B.rx : Y = BLOCKY + B0.ry - B.ry
  IF HITTEST(B, X, Y) <> 0 THEN
    IF HITTEST(B, X - 1, Y) = 0 THEN
      X = X - 1
    ELSEIF HITTEST(B, X + 1, Y) = 0 THEN
      X = X + 1
    ELSE
      EXIT SUB
    END IF
  END IF
  CALL DRAWBLOCK(1)
  BLOCKX = X : BLOCKY = Y : BLOCKCUR = B0.r
  CALL DRAWBLOCK(0)
END SUB

SUB DROP
  SHARED BLOCKX, BLOCKY, BLOCKCUR
  CALL DRAWBLOCK(1)
  WHILE HITTEST(BLOCK(BLOCKCUR), BLOCKX, BLOCKY + 1) = 0
    BLOCKY = BLOCKY + 1
  WEND
  CALL DRAWBLOCK(0)
END SUB

SUB FREEZE
  SHARED BLOCKX, BLOCKY, BLOCKCUR, STAGEW, STAGEH, SCORE&, LEVEL
  W = BLOCK(BLOCKCUR).w : H = BLOCK(BLOCKCUR).h
  FOR Y = 0 TO H-1 : FOR X = 0 TO W-1
    IF (BLOCK(BLOCKCUR).map AND BITMASK(X+Y*W)) <> 0 THEN
      STAGE(Y+BLOCKY, X+BLOCKX) = BLOCK(BLOCKCUR).col
    END IF
  NEXT X : NEXT Y

  Y = STAGEH - 1: REDUCED = 0
  WHILE Y >= 0
    FULL = 1
    FOR X = 0 TO STAGEW-1
      IF STAGE(Y, X)=0 THEN
        FULL = 0 : EXIT FOR
      END IF
    NEXT X
    IF FULL = 0 THEN
      Y = Y-1
    ELSE
      FOR X = 0 TO STAGEW-1
        FOR Y1 = Y TO 1 STEP -1
          STAGE(Y1, X)=STAGE(Y1-1, X)
        NEXT Y1
        STAGE(0, X)=0
      NEXT X
      REDUCED = REDUCED + 1
    END IF
  WEND
  IF REDUCED > 0 THEN
    SCORE& = SCORE& + (REDUCED ^ 2) * 100
    SOUND 500,1: SOUND 1000,1
  ELSE
    SCORE& = SCORE& + 1
  END IF

  IF SCORE& < 1000 THEN
    LEVEL = 0
  ELSEIF SCORE& < 2000 THEN
    LEVEL = 1
  ELSEIF SCORE& < 3000 THEN
    LEVEL = 2
  ELSEIF SCORE& < 4000 THEN
    LEVEL = 3
  ELSEIF SCORE& < 5000 THEN
    LEVEL = 4
  ELSEIF SCORE& < 7000 THEN
    LEVEL = 5
  ELSEIF SCORE& < 9000 THEN
    LEVEL = 6
  END IF

  CALL DRAWSTAGE
END SUB

SUB NEWBLOCK
  SHARED BLOCKX, BLOCKY, BLOCKCUR, BLOCKNEXT, STAGEW, STATUS
  BLOCKCUR = BLOCKNEXT: BLOCKNEXT = (RND * 100) MOD 19
  BLOCKX = INT((STAGEW - BLOCK(BLOCKCUR).w) / 2): BLOCKY = 0
  IF HITTEST(BLOCK(BLOCKCUR), BLOCKX, BLOCKY) <> 0 THEN
    STATUS = -1
  ELSE
    CALL DRAWBLOCK(0) : CALL DRAWBLOCKNEXT
  END IF
END SUB

SUB DRAWBLOCK(CL AS INTEGER)
  SHARED BLOCKX, BLOCKY, BLOCKCUR, STAGEW, STAGEH
  COLOR BLOCK(BLOCKCUR).col+8,0
  SYM$=CHR$(219):IF CL>0 THEN SYM$=" "
  W = BLOCK(BLOCKCUR).w : H = BLOCK(BLOCKCUR).h
  FOR Y = 0 TO H-1 : FOR X = 0 TO W-1
    IF (BLOCK(BLOCKCUR).map AND BITMASK(X+Y*W)) <> 0 THEN
      X1 = BLOCKX + X: Y1 = BLOCKY + Y
      IF Y1>=0 THEN
        LOCATE Y1+3,X1+16:PRINT SYM$;
      END IF
    END IF
  NEXT X : NEXT Y
END SUB

SUB DRAWSTAGE
  SHARED BLOCKX, BLOCKY, BLOCKCUR, STAGEW, STAGEH, SCORE&
  FOR Y = 0 TO STAGEH-1
    LOCATE 3+Y,16
    FOR X = 0 TO STAGEW-1
      IF STAGE(Y,X)>0 THEN
        COLOR STAGE(Y,X)+8,0: PRINT CHR$(219);
      ELSE
        COLOR 0,0: PRINT " ";
      END IF
    NEXT X
  NEXT Y
  LOCATE 5,5: COLOR 7,0: PRINT SCORE&;
END SUB

SUB DRAWFRAME
  SHARED STAGEW, STAGEH
  CLS:WIDTH 40

  COLOR 9,1
  LOCATE 2,15:PRINT CHR$(201);
  FOR I=1 TO STAGEW
    PRINT CHR$(205);
  NEXT I
  PRINT CHR$(187);

  FOR I=1 TO STAGEH
    LOCATE I+2,15:PRINT CHR$(186);
    LOCATE I+2,26:PRINT CHR$(186);
  NEXT I

  LOCATE 3+STAGEH,15:PRINT CHR$(200);
  FOR I=1 TO STAGEW
    PRINT CHR$(205);
  NEXT I
  PRINT CHR$(188);
  
  COLOR 7,0
  LOCATE 3,6,0: PRINT "SCORE"
  LOCATE 3,30: PRINT "NEXT"
END SUB

SUB DRAWBLOCKNEXT
  SHARED BLOCKX, BLOCKY, BLOCKCUR, BLOCKNEXT, STAGEW, STAGEH
  COLOR 0,0: SX0 = 30: SY0 = 5
  FOR I=0 TO 3
    LOCATE SY0+I,SX0:PRINT "    "
  NEXT I
  W = BLOCK(BLOCKNEXT).w : H = BLOCK(BLOCKNEXT).h
  X1 = (4-W)\2: Y1 = (4-H)\2
  FOR Y = 0 TO H-1 : FOR X = 0 TO W-1
    IF (BLOCK(BLOCKNEXT).map AND BITMASK(X+Y*W)) <> 0 THEN
      SX = SX0 + X1 + X: SY = SY0 + Y1 + Y
      COLOR BLOCK(BLOCKNEXT).col+8,0
      LOCATE SY,SX:PRINT CHR$(219);
    END IF
  NEXT X : NEXT Y
END SUB

SUB PAUSE
  LOCATE 24,16: COLOR 14,0: PRINT "  Paused  ";
  WHILE INPUT$(1)="": WEND
  LOCATE 24,16: COLOR 14,0: PRINT "          ";
  CALL DRAWSTAGE: CALL DRAWBLOCK(1)
END SUB
